


////kapildev
/// maintenance_report table
CREATE TYPE priority_enum AS ENUM ('lowest', 'moderate', 'high');

CREATE TABLE maintenance_report (
    maintenance_id SERIAL PRIMARY KEY,
    technician_id INTEGER REFERENCES technician(technician_id),
    workorder_id INTEGER REFERENCES workorder(workorder_id),
    equipments_required TEXT,
    issues_faced TEXT,
    priority priority_enum,
    created_at DATE,
    deleted_status BOOLEAN
);


//Thakshika-tower query

CREATE TABLE tower_info ( 
    tower_id SERIAL PRIMARY KEY,
    location TEXT,
    height DOUBLE PRECISION,
    type TEXT,
    status TEXT CHECK (status IN ('active', 'inactive', 'under-maintenance')), 
    pincode INTEGER,
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION,
    power_reading INTEGER,
    fuel_reading NUMERIC,
    created_at DATE,
    updated_at DATE,
    last_maintained DATE,
    deleted_status BOOLEAN
);


//Sri Ranjani 
//Technician table query 

CREATE TABLE technician (
    technician_id SERIAL PRIMARY KEY,
    role VARCHAR(50) NOT NULL,
    active_status BOOLEAN DEFAULT TRUE,
    name VARCHAR(100) NOT NULL DEFAULT generate_name(),  -- Auto-generated name
    email VARCHAR(100) UNIQUE NOT NULL,
    specialization VARCHAR(100),
    location VARCHAR(100),
    deleted_status BOOLEAN DEFAULT FALSE,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL DEFAULT generate_password()  -- Auto-generated password
);


//autogenerated name and password function

CREATE FUNCTION generate_name() RETURNS TEXT AS $$
BEGIN
    RETURN (SELECT CONCAT(first_name, ' ', last_name)
            FROM generate_series(1, 10) AS s
            JOIN (SELECT substring(lower(md5(random()::text)) FROM 1 FOR 5) AS first_name,
                         substring(lower(md5(random()::text)) FROM 6 FOR 5) AS last_name) AS names
            ORDER BY random()
            LIMIT 1);
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION generate_password(length INTEGER DEFAULT 12) RETURNS TEXT AS $$
BEGIN
    RETURN (SELECT string_agg(substring(lower(md5(random()::text)) FROM 1 FOR 1), '')
            FROM generate_series(1, length));
END;
$$ LANGUAGE plpgsql;
